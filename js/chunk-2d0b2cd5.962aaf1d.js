(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b2cd5"],{2650:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return C}));var a=r("a4ee"),s=(r("e06a"),r("2eab")),i=r("ce50"),l=r("9096"),n=r("b2b2"),o=r("e694"),c=r("f4cc"),p=r("e041"),u=r("59b2"),b=(r("b50f"),r("c120"),r("1a3e")),d=r("afcf"),h=r("d386"),y=r("09db"),O=r("a6a3"),j=r("f46e"),f=r("b485"),v=r("303f"),_=r("3d59"),g=r("997b"),m=r("8b28"),S=r("b911"),w=r("0db5"),T=r("8e17"),R=r("5a62"),k=r("d409"),W=r("54b4"),U=r("22f4"),L=r("e9d0"),P=r("5996");const A=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let D=class extends(Object(g["a"])(Object(k["a"])(Object(R["a"])(Object(S["a"])(Object(w["a"])(Object(f["a"])(Object(v["a"])(Object(_["a"])(Object(o["a"])(Object(l["b"])(Object(T["a"])(Object(j["a"])(Object(m["a"])(O["a"])))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=Object(n["k"])(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(c["t"]).then(()=>this._fetchService(t))),Promise.resolve(this)}get attributionDataUrl(){var e;const t=null==(e=this.parsedUrl)?void 0:e.path.toLowerCase();return t&&this._getDefaultAttribution(this._getMapName(t))}readSpatialReference(e,t){return(e=e||t.tileInfo&&t.tileInfo.spatialReference)&&P["a"].fromJSON(e)}writeSublayers(e,t,r,a){if(!this.loaded||!e)return;const s=e.slice().reverse().flatten(({sublayers:e})=>e&&e.toArray().reverse()).toArray(),i=[],l={writeSublayerStructure:!1,...a};s.forEach(e=>{const t=e.write({},l);i.push(t)}),i.some(e=>Object.keys(e).length>1)&&(t.layers=i)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl.path)}castTileServers(e){return Array.isArray(e)?e.map(e=>Object(p["K"])(e).path):null}fetchTile(e,t,r,a={}){const{signal:i}=a,l=this.getTileUrl(e,t,r),n={responseType:"image",signal:i,query:{...this.refreshParameters}};return Object(s["default"])(l,n).then(e=>e.data)}getTileUrl(e,t,r){const a=!this.tilemapCache&&this.supportsBlankTile,s=Object(p["E"])({...this.parsedUrl.query,blankTile:!a&&null,...this.customParameters,token:this.apiKey}),i=this.tileServers;return`${i&&i.length?i[t%i.length]:this.parsedUrl.path}/tile/${e}/${t}/${r}${s?"?"+s:""}`}_fetchService(e){return new Promise((t,r)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new i["a"]("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void t({data:this.sourceJSON})}if(!this.parsedUrl)throw new i["a"]("tile-layer:undefined-url","layer's url is not defined");const a=Object(W["e"])(this.parsedUrl.path);if(Object(n["k"])(a)&&"ImageServer"===a.serverType)throw new i["a"]("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");Object(s["default"])(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(t,r)}).then(t=>{if(t.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!Object(W["c"])(this.url))return this._fetchServerVersion(this.url,e).then(e=>{this.read({currentVersion:e})}).catch(()=>{})})}_fetchServerVersion(e,t){if(!Object(W["b"])(e))return Promise.reject();const r=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return Object(s["default"])(r,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:t}).then(e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new i["a"]("tile-layer:version-not-available")})}_getMapName(e){const t=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return t&&t[2]}_getDefaultAttribution(e){if(!e)return;let t;e=e.toLowerCase();for(let r=0,a=A.length;r<a;r++)if(t=A[r],t.toLowerCase().indexOf(e)>-1)return Object(p["A"])("//static.arcgis.com/attribution/"+t)}_getDefaultTileServers(e){const t=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),r=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return t||r?[e,e.replace(t?/server\.arcgisonline/i:/services\.arcgisonline/i,t?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};Object(a["a"])([Object(u["b"])({readOnly:!0})],D.prototype,"attributionDataUrl",null),Object(a["a"])([Object(u["b"])({type:["show","hide","hide-children"]})],D.prototype,"listMode",void 0),Object(a["a"])([Object(u["b"])({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],D.prototype,"isReference",void 0),Object(a["a"])([Object(u["b"])({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],D.prototype,"operationalLayerType",void 0),Object(a["a"])([Object(u["b"])({type:Boolean})],D.prototype,"resampling",void 0),Object(a["a"])([Object(u["b"])()],D.prototype,"sourceJSON",void 0),Object(a["a"])([Object(u["b"])({type:P["a"]})],D.prototype,"spatialReference",void 0),Object(a["a"])([Object(d["a"])("spatialReference",["spatialReference","tileInfo"])],D.prototype,"readSpatialReference",null),Object(a["a"])([Object(u["b"])({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],D.prototype,"path",void 0),Object(a["a"])([Object(u["b"])({readOnly:!0})],D.prototype,"sublayers",void 0),Object(a["a"])([Object(y["a"])("sublayers",{layers:{type:[L["a"]]}})],D.prototype,"writeSublayers",null),Object(a["a"])([Object(u["b"])({json:{read:!1,write:!1}})],D.prototype,"popupEnabled",void 0),Object(a["a"])([Object(u["b"])()],D.prototype,"tileServers",null),Object(a["a"])([Object(b["a"])("tileServers")],D.prototype,"castTileServers",null),Object(a["a"])([Object(u["b"])({readOnly:!0,json:{read:!1}})],D.prototype,"type",void 0),Object(a["a"])([Object(u["b"])(U["n"])],D.prototype,"url",void 0),D=Object(a["a"])([Object(h["a"])("esri.layers.TileLayer")],D),D.prototype.fetchTile.__isDefault__=!0;const C=D}}]);
//# sourceMappingURL=chunk-2d0b2cd5.962aaf1d.js.map